/*******************************************************************************
 * 2016, All rights reserved.(HANDLER)
 *******************************************************************************/
package com.seind.dccp.datadesign.handler;
//Start of user code (user defined imports)
import java.io.IOException;

// End of user code

/**
 * Description of DataHandler.
 * 
 * @author mariabibin
 */

public interface DataHandler {
	// Start of user code (user defined attributes for DataHandler)

	// End of user code

	/**
	 * Description of the method process.
	 * @param inputsource 
	 * @param sourceformat 
	 * @return 
	 * @throws CloneNotSupportedException 
	 */

	public Object process(Object inputsource, String sourceformat) throws IOException, CloneNotSupportedException;


	// Start of user code (user defined methods for DataHandler)

	// End of user code

}


/*******************************************************************************
 * 2016, All rights reserved.
 *******************************************************************************/
package com.seind.dccp.datadesign.handler;

//Start of user code (user defined imports)
import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.lang.management.RuntimeMXBean;
import java.util.ArrayList;
import java.util.Iterator;

import org.junit.Test;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

import com.seind.dccp.datadesign.identifier.DataIdentifier;
import com.seind.dccp.datadesign.identifier.DataIdentifierImpl;
import com.seind.dccp.datadesign.processor.DataProcessor;
import com.seind.dccp.datadesign.processor.DataProcessorImpl;

// End of user code

/**
 * Description of DataHandlerImpl.
 * 
 * @author mariabibin
 */

@Configuration
@ComponentScan(basePackages="com.seind.dccp.datadesign.handler")

public class DataHandlerImpl implements DataHandler {
	// Start of user code (user defined attributes for DataHandlerImpl)
	
	// End of user code

	/**
	 * The constructor.
	 */
	
	
	public DataHandlerImpl() {
		// Start of user code constructor for DataHandlerImpl)
		super();
		
		//context.refresh();
		// End of user code
	}


	/**
	 * Description of the method process.
	 * 
	 * @param inputsource
	 * @param sourceformat
	 * @return
	 * @throws IOException
	 * @throws CloneNotSupportedException 
	 */

	
	@SuppressWarnings({"rawtypes", "unused", "resource" })
@Test
	public Object process(Object inputsource, String sourceformat)throws IOException, CloneNotSupportedException {
		// Start of user code for method process
		AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
		context.scan("com.seind.dccp.datadesign.handler");
		ArrayList<Object> in = new ArrayList<Object>();
	    in.add(inputsource);
	    InputSource is = new InputSource();
	    InputSource clone=(InputSource) is.clone();
	    
	    Iterator itr = in.iterator();
		for(Object input:in)
		{
			clone.setinputsource(inputsource);
			
			RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean();
			String jvmName = bean.getName();
		    
			
		    String processid = String.valueOf(jvmName.split("@")[0]);
		  
			clone.setProcessid(processid);
			
			System.out.println(processid);
			if (sourceformat == null) {
				DataIdentifier dataidentifier = new DataIdentifierImpl();
				dataidentifier.prepareSource(clone);
			}
			
			DataProcessor dataprocessor = new DataProcessorImpl(clone);
			Thread t1 = new Thread((Runnable) dataprocessor);
			t1.start();

		}
		return inputsource;
	}

	
}

	// End of user code

package com.seind.dccp.datadesign.handler;

import java.io.IOException;

import org.junit.Assert;
import org.junit.Test;
import org.powermock.api.mockito.PowerMockito;

public class DataHandlerImplTest {

	@Test
	public void testProcess() throws IOException, CloneNotSupportedException {
		DataHandler mock=PowerMockito.mock(DataHandlerImpl.class);
		Object inputsource="/home/prabu/Desktop/docs/a.xlsx";
		String sourceformat = null;
		PowerMockito.when(mock.process(inputsource, sourceformat)).thenReturn(inputsource);
		DataHandlerImpl datahandlerimpl=new DataHandlerImpl();
		Assert.assertEquals(inputsource, datahandlerimpl.process(inputsource, sourceformat));
	}

}



/*******************************************************************************
 * 2016, All rights reserved.
 *******************************************************************************/
package com.seind.dccp.datadesign.handler;

import org.springframework.stereotype.Service;



// Start of user code (user defined imports)

// End of user code

/**
 * Description of InputSource.
 * spring bean
 * @author mariabibin
 */
@Service("DataHandlerImpl")
public class InputSource implements Cloneable{
	// Start of user code (user defined attributes for InputSource)
	public InputSource(){
		
	}
	private Object inputsource;
	private String sourceformat;
	private String inputSource;
	private String processid;
    private Object rule;
	
	// End of user code
/**
	 * The constructor.
	 * @param inputSource
	 * @param inputsource
	 * @param sourceformat
	 * @param processid
	 */
	
	public InputSource(String processid) {
		//Start of user code (user defined methods for InputSource)
		
        this.processid=processid;
		
	}

	public Object getinputsource(){
		return inputsource;
	}
	public void setinputsource(Object inputsource){
		this.inputsource=inputsource;
	}
	public String getsourceformat(){
		return sourceformat;
	}
	public void setsourceformat(String sourceformat){
		  this.sourceformat=sourceformat;
	}
	public String getInputSource() {
		return inputSource;
	}
	public void setInputSource(String inputsource) {
		this.inputsource = inputsource;
	}
	public String getProcessid(){
		return processid;
	}
    public void setProcessid(String processid){
    	this.processid=processid;
    }
    public Object getRule() {
		return rule;
	}
	public void setRule(Object rule) {
		this.rule = rule;
	}

	

@Override
protected Object clone() throws CloneNotSupportedException {
    return super.clone();
}
}

// End of user code

		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.datadesign</groupId>
  <artifactId>DataDesgin</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>DataDesgin</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
  <dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.0.0.RELEASE</version>
		</dependency>
		<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>4.0.0.RELEASE</version>
    </dependency>
    <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-expression</artifactId>
    <version>4.0.0.RELEASE</version>
</dependency>
    
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
    <dependency>
    <groupId>org.powermock</groupId>
    <artifactId>powermock-core</artifactId>
    <version>1.6.5</version>
</dependency>
<dependency>
    <groupId>org.powermock</groupId>
    <artifactId>powermock-api-mockito</artifactId>
    <version>1.6.5</version>
</dependency>
</dependencies>
  <build>
    <sourceDirectory>src</sourceDirectory>
 <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>


package com.seind.dccp.datadesign.processor;

import java.util.ArrayList;
import java.util.List;

import com.seind.dccp.datadesign.handler.InputSource;
import com.seind.dccp.rulebuilder.builder.RuleBuilder;
import com.seind.dccp.rulebuilder.builder.RuleBuilderImpl;
import com.seind.dccp.rulebuilder.builder.RuleSource;


/**
 * Description of DataProcessorImpl.
 * 
 * @author mariabibin
 */
public class DataProcessorImpl implements DataProcessor {
	private InputSource inputSource;
	
	

	// Start of user code (user defined attributes for DataProcessorImpl)

	// End of user code

	/**
	 * The constructor. 
	 */
	public DataProcessorImpl(Object inputSource) {
		super();
		
		// Start of user code constructor 
		this.inputSource=(InputSource) inputSource;
		
				
		// End of user code
	}


	public DataProcessorImpl() {
		// TODO Auto-generated constructor stub
	}


	/**
	 * Description of the method publish.
	 * @param inputSource 
	 * @return Object
	 */
	public Object publish(InputSource inputSource) {
		//call ruleBuilder for get rules;
		
		// Start of user code for method publish
		
	
		
		List<String> sourceList = new ArrayList<String>();
		List<String> ruleTypeList = new ArrayList<String>();
		List<String> parserTypeList=new ArrayList<String>();
		
		sourceList.add("IN");
		sourceList.add("IN");
		
									
		ruleTypeList.add("COMMON");
		ruleTypeList.add("DOMAIN");
		
		parserTypeList.add("XMLPARSER");
		parserTypeList.add("XMLPARSER");
				
		//System.out.println("RuleSource Calling");
		RuleSource rs=new RuleSource();
		
		//System.out.println("Rule source Setting");
		rs.setSource(sourceList);
		rs.setRuleType(ruleTypeList);
		rs.setParserType(parserTypeList);
		
		RuleBuilder rb=new RuleBuilderImpl();
		Object ruleObject=rb.prepareRule(rs);
		//System.out.println("After RuleBuilder");
		
		inputSource.setRule(ruleObject);
		//System.out.println();
		System.out.println(inputSource.getRule());
		
		return inputSource;		
		// End of user code
	}

	
	public void run() {
		// TODO Auto-generated method stub
		//System.out.println("run");
		
		DataProcessorImpl dpi=new DataProcessorImpl();
        dpi.publish(inputSource);
        		
	}


}


/*******************************************************************************
 * 2016, All rights reserved.
 *******************************************************************************/
package com.seind.dccp.datadesign.processor;

import com.seind.dccp.datadesign.handler.InputSource;

// End of user code

/**
 * Description of DataProcessor.
 * 
 * @author mariabibin
 */
@SuppressWarnings("unused")
public interface DataProcessor extends Runnable{
	// Start of user code (user defined attributes for DataProcessor)

	// End of user code

	/**
	 * Description of the method publish.
	 * @param inputSource 
	 * @return 
	 */
	//public Object publish(InputSource inputSource);

	// Start of user code (user defined methods for DataProcessor)

	// End of user code

}

/*******************************************************************************
 * 2016, All rights reserved.
 *******************************************************************************/
package com.seind.dccp.datadesign.registry;

import java.util.HashMap;
import java.util.Map;

import com.seind.dccp.datadesign.mapper.DataModelHandler;
import com.seind.dccp.datadesign.mapper.DataModelHandlerImpl;

// Start of user code (user defined imports)

// End of user code

/**
 * Description of Cache.
 * 
 * @author mariabibin
 */
public class Cache {
	/**
	 * Description of the property datamap.
	 */
	public HashMap<String,Object> hashmap=new HashMap<String, Object>();
	@SuppressWarnings("rawtypes")
	public Map datamap = null;

	// Start of user code (user defined attributes for Cache)

	// End of user code

	/**
	 * The constructor.
	 */
	/* * Description of the method addData.
	 * @param processId 
	 * @param data 
	 */
	
	public void addData(String processId, Object data) {
		// Start of user code for method addData
		hashmap.put(processId, data);
		// End of user code
   }

	/**
	 * Description of the method getData.
	 * @param processId 
	 * @param inputsource 
	 * @return 
	 */
    
	public Object getData(String processId) {
		// Start of user code for method getData
			if(!hashmap.containsKey(processId)){
	        DataModelHandler datamodelhandler=new DataModelHandlerImpl();
	       System.out.println("3.getdata");
		return datamodelhandler.prepareDataModel(processId);        
		}
			System.out.println("5.obj= "+hashmap.get(processId));
	return hashmap.get(processId);
		// End of user code
	}

	// Start of user code (user defined methods for Cache)

	// End of user code
	/**
	 * Returns datamap.
	 * @return datamap 
	 */
	@SuppressWarnings("rawtypes")
	public Map getDatamap() {
	return this.datamap;
	}

	/**
	 * Sets a value to attribute datamap. 
	 * @param newDatamap 
	 */
	@SuppressWarnings("rawtypes")
	public void setDatamap(Map newDatamap) {
		this.datamap = newDatamap;
	}
}



/*******************************************************************************
 * 2016, All rights reserved.
 *******************************************************************************/
package com.seind.dccp.datadesign.registry;

// Start of user code (user defined imports)

// End of user code

/**
 * Description of ServiceLocator.
 * 
 * @author mariabibin
 */
public class ServiceLocator {
	/**
	 * Description of the property cache.
	 * 
	 * @return
	 */
	// Start of user code (user defined attributes for ServiceLocator)

	public static Cache cache = new Cache();

	// End of user code

	/**
	 * The constructor.
	 */

	public ServiceLocator() {
		// Start of user code constructor for ServiceLocator)
		super();
		// End of user code
	}

	/**
	 * Description of the method getData.
	 * 
	 * @param processId
	 * @return
	 */

	public static Object getData(String processId) {

		System.out.println("2.in object get data");
		// Start of user code for method getData
		return cache.getData(processId);
		// End of user code
	}
}

package com.seind.dccp.datadesign.mapper;

public interface DataModelHandler {
public Object  prepareDataModel(String ob);
}



package com.seind.dccp.datadesign.mapper;

import com.seind.dccp.datadesign.registry.ServiceLocator;

public class DataModelHandlerImpl implements DataModelHandler {
	
	public Object prepareDataModel(String processId){
		
	Object obj=new Object();
	System.out.println("4.datamodelhandler");
	obj="Hi";
	ServiceLocator.cache.addData(processId, obj);
	return processId;
	}
	
}


